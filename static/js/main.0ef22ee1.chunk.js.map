{"version":3,"sources":["timer/timerCount.js","timer/render.js","timer/timer.js","timer2/timerCount.js","timer2/render.js","timer2/timer.js","App.js","serviceWorker.js","index.js"],"names":["TimerCounter","className","this","props","sec","Component","Timer","style","width","backgroundColor","color","onClick","toggle","state","status","restart","min","status2","clear","clearInterval","timer","changeStyle","setState","changeTimer","prevState","setInterval","React","nextProps","nextState","toString","slice","restartStatus","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0ef22ee1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nclass TimerCounter extends Component {\n  render() {\n    return <div className=\"timer\">0:{this.props.sec}</div>;\n  }\n}\nexport default TimerCounter;\n","import React from \"react\";\nimport TimerFunc from \"./timerCount\";\nconst Timer = (props) => {\n  return (\n    <div className=\"cont\">\n      <TimerFunc sec={props.sec} />\n      <div\n        className=\"bar\"\n        style={{ width: props.width, backgroundColor: props.color }}\n      ></div>\n      <button className=\"btn\" onClick={props.toggle}>\n        {props.state.status ? \"start\" : \"stop\"}\n      </button>\n      <button className=\"btn restart\" onClick={props.restart}>\n        restart\n      </button>\n    </div>\n  );\n};\nexport default Timer;\n","import React from \"react\";\nimport Create from \"./render\";\n\nclass Timer extends React.Component {\n  state = {\n    min: 0,\n    sec: 59,\n    status: false,\n    status2: false,\n    width: 177,\n    color: \"#9acd32\",\n  };\n\n  componentDidMount() {\n    this.timer = setInterval(this.changeTimer, 1000);\n  }\n  clear = () => {\n    clearInterval(this.timer);\n  };\n\n  changeStyle = () => {\n    if (this.state.sec <= 10) {\n      return this.setState({\n        width: this.state.width - 3,\n        color: \"#f44336\",\n      });\n    } else {\n      return this.setState({\n        width: this.state.width - 3,\n      });\n    }\n  };\n\n  changeTimer = () => {\n    this.changeStyle();\n    this.setState((prevState) => {\n      if (this.state.sec <= 0) {\n        this.clear();\n      } else if (this.state.sec <= 10) {\n        return {\n          sec: \"0\" + (prevState.sec - 1),\n        };\n      } else {\n        return {\n          sec: prevState.sec - 1,\n        };\n      }\n    });\n  };\n  toggle = () => {\n    this.setState((prevState) => {\n      return { status: !prevState.status };\n    });\n    return this.state.status\n      ? (this.timer = setInterval(this.changeTimer, 1000))\n      : clearInterval(this.timer);\n  };\n  restart = () => {\n    this.setState({\n      sec: 59,\n      width: 177,\n    });\n  };\n  render() {\n    return (\n      <div className=\"wrap\">\n        <Create\n          sec={this.state.sec}\n          width={this.state.width}\n          color={this.state.color}\n          toggle={this.toggle}\n          state={this.state}\n          restart={this.restart}\n        />\n      </div>\n    );\n  }\n}\nexport default Timer;\n","import React, { Component } from \"react\";\nclass TimerCounter extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.sec.toString().slice(-1) === \"0\") {\n      return true;\n    } else if (nextProps.restartStatus) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  render() {\n    return <div className=\"timer\">0:{this.props.sec}</div>;\n  }\n}\nexport default TimerCounter;\n","import React from \"react\";\nimport TimerFunc from \"./timerCount\";\nconst Timer = (props) => {\n  return (\n    <div className=\"cont\">\n      <TimerFunc sec={props.sec} restartStatus={props.restartStatus} />\n      <div\n        className=\"bar\"\n        style={{ width: props.width, backgroundColor: props.color }}\n      ></div>\n\n      <button className=\"btn\" onClick={props.toggle}>\n        {props.state.status ? \"start\" : \"stop\"}\n      </button>\n      <button className=\"btn restart\" onClick={props.restart}>\n        restart\n      </button>\n    </div>\n  );\n};\nexport default Timer;\n","import React from \"react\";\nimport Create from \"./render\";\n\nclass Timer extends React.Component {\n  state = {\n    min: 0,\n    sec: 59,\n    status: false,\n    status2: false,\n    width: 177,\n    color: \"#9acd32\",\n    restart: false,\n  };\n\n  componentDidMount() {\n    this.timer = setInterval(this.changeTimer, 1000);\n  }\n  clear = () => {\n    clearInterval(this.timer);\n  };\n\n  changeStyle = () => {\n    if (this.state.sec <= 10) {\n      return this.setState({\n        width: this.state.width - 3,\n        color: \"#f44336\",\n      });\n    } else {\n      return this.setState({\n        width: this.state.width - 3,\n        restart: false,\n      });\n    }\n  };\n\n  changeTimer = () => {\n    this.changeStyle();\n    this.setState((prevState) => {\n      if (this.state.sec <= 0) {\n        this.clear();\n      } else if (this.state.sec <= 10) {\n        return {\n          sec: \"0\" + (prevState.sec - 1),\n        };\n      } else {\n        return {\n          sec: prevState.sec - 1,\n        };\n      }\n    });\n  };\n  toggle = () => {\n    this.setState((prevState) => {\n      return { status: !prevState.status };\n    });\n    return this.state.status\n      ? (this.timer = setInterval(this.changeTimer, 1000))\n      : this.clear();\n  };\n  restart = () => {\n    this.setState({\n      sec: 59,\n      width: 177,\n      restart: true,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"wrap\">\n        <Create\n          sec={this.state.sec}\n          width={this.state.width}\n          color={this.state.color}\n          toggle={this.toggle}\n          state={this.state}\n          restart={this.restart}\n          restartStatus={this.state.restart}\n        />\n      </div>\n    );\n  }\n}\nexport default Timer;\n","import React from \"react\";\nimport \"./App.css\";\nimport Timer from \"./timer/timer\";\nimport Timer2 from \"./timer2/timer\";\n\nfunction App() {\n  return (\n    <div className=\"whole\">\n      <Timer />\n      <Timer2 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}